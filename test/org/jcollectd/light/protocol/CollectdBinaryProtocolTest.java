/*
 * Copyright (c) 2012. Andrus Viik and other contributors
 * http://jcollectd.org/
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package org.jcollectd.light.protocol;

import org.junit.Test;

import javax.crypto.Mac;
import javax.xml.bind.DatatypeConverter;

import static org.junit.Assert.assertArrayEquals;

/**
 * jcollectd - org.jcollectd.light.protocol
 * <p/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * <p/>
 * Date: 9/13/12
 * Time: 10:47 AM
 */
public class CollectdBinaryProtocolTest {

    @Test
    public void testHeader() throws Exception {
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("00"),
                CollectdBinaryProtocol.header((byte) 0));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("02"),
                CollectdBinaryProtocol.header((byte) 2));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("03"),
                CollectdBinaryProtocol.header((byte) 3));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("04"),
                CollectdBinaryProtocol.header((byte) 4));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("05"),
                CollectdBinaryProtocol.header((byte) 5));


        assertArrayEquals(
                DatatypeConverter.parseHexBinary("00000012"),
                CollectdBinaryProtocol.header((short) 0, (short) 18));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0002000d"),
                CollectdBinaryProtocol.header((short) 2, (short) 13));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0003000d"),
                CollectdBinaryProtocol.header((short) 3, (short) 13));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("00040014"),
                CollectdBinaryProtocol.header((short) 4, (short) 20));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0005000c"),
                CollectdBinaryProtocol.header((short) 5, (short) 12));
    }

    @Test
    public void testString() throws Exception {
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("00000012627269636b792e74656570756200"),
                CollectdBinaryProtocol.string((short) 0, "bricky.teepub"));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0000000f6465622e74656570756200"),
                CollectdBinaryProtocol.string((short) 0, "deb.teepub"));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0002000d746370636f6e6e7300"),
                CollectdBinaryProtocol.string((short) 2, "tcpconns"));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0002000863707500"),
                CollectdBinaryProtocol.string((short) 2, "cpu"));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0003000d32322d6c6f63616c00"),
                CollectdBinaryProtocol.string((short) 3, "22-local"));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("000300063000"),
                CollectdBinaryProtocol.string((short) 3, "0"));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("000400147463705f636f6e6e656374696f6e7300"),
                CollectdBinaryProtocol.string((short) 4, "tcp_connections"));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0004000863707500"),
                CollectdBinaryProtocol.string((short) 4, "cpu"));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0005000c434c4f53494e4700"),
                CollectdBinaryProtocol.string((short) 5, "CLOSING"));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("000500096e69636500"),
                CollectdBinaryProtocol.string((short) 5, "nice"));

    }

    @Test
    public void testNumeric() throws Exception {
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0001000c0000000050531d18"),
                CollectdBinaryProtocol.numeric((short) 1, 1347624216));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0001000c0000000050531d18"),
                CollectdBinaryProtocol.numeric((short) 1, 1347624216));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0001000c0000000050531d18"),
                CollectdBinaryProtocol.numeric((short) 1, 1347624216));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0001000c0000000050531d18"),
                CollectdBinaryProtocol.numeric((short) 1, 1347624216));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0007000c0000000000000005"),
                CollectdBinaryProtocol.numeric((short) 7, 5));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0007000c0000000140000000"),
                CollectdBinaryProtocol.numeric((short) 7, 5368709120L));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0008000c1414cbc85c6ae9d8"),
                CollectdBinaryProtocol.numeric((short) 8, 1447005441697180120L));
    }

    @Test
    public void testLong() throws Exception {
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("020000000000000000"),
                CollectdBinaryProtocol.value((byte) 2, 0));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0200000000000016bc"),
                CollectdBinaryProtocol.value((byte) 2, 5820));
    }

    @Test
    public void testDecimal() throws Exception {
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("01000000807fe34041"),
                CollectdBinaryProtocol.value((byte) 1, 2213631.0));

        assertArrayEquals(
                DatatypeConverter.parseHexBinary("0100000000d0d0f93f"),
                CollectdBinaryProtocol.value((byte) 1, 1.6134796142578125));
        assertArrayEquals(
                DatatypeConverter.parseHexBinary("01000000000096a640"),
                CollectdBinaryProtocol.value((byte) 1, 2891.0));

    }

    @Test
    public void testSign() throws Exception {
        String user = "testuser";
        String key = "testpass";

        Mac hmacSHA256 = CollectdBinaryProtocol.hmacSHA256(key);

        byte[] payload = DatatypeConverter.parseHexBinary(
                "0000000974657374000008000c1416c25a85668e930009000c00000000400000000002000a7573657273000004000a7573657273000006000f00010100000000000008400008000c1416c25ac566fd3b0006000f00010100000000000008400008000c1416c25b0566ae110006000f00010100000000000008400008000c1416c25b456688110006000f00010100000000000008400008000c1416c25b8566a2ff0006000f00010100000000000008400008000c1416c25bc56683e20006000f00010100000000000008400008000c1416c25c0566b6530006000f00010100000000000008400008000c1416c25c4566917a0006000f00010100000000000008400008000c1416c25c856692d60006000f00010100000000000008400008000c1416c25cc56702bf0006000f00010100000000000008400008000c1416c25d0566cab00006000f00010100000000000008400008000c1416c25d4566ba640006000f00010100000000000008400008000c1416c25d8566f1970006000f00010100000000000008400008000c1416c25dc56686390006000f00010100000000000008400008000c1416c25e05669b6f0006000f00010100000000000008400008000c1416c25e4566c6440006000f00010100000000000008400008000c1416c25e8566ac540006000f00010100000000000008400008000c1416c25ec5667b800006000f00010100000000000008400008000c1416c25f05668aff0006000f00010100000000000008400008000c1416c25f4566c3440006000f00010100000000000008400008000c1416c25f8566bae80006000f00010100000000000008400008000c1416c25fc5669c7f0006000f00010100000000000008400008000c1416c2600566b92b0006000f00010100000000000008400008000c1416c2604566bbb20006000f00010100000000000008400008000c1416c2608566c19d0006000f00010100000000000008400008000c1416c260c56698260006000f00010100000000000008400008000c1416c2610566cd3d0006000f00010100000000000008400008000c1416c2614566bd230006000f00010100000000000008400008000c1416c26185670f0b0006000f00010100000000000008400008000c1416c261c566b4820006000f00010100000000000008400008000c1416c2620567bb9f0006000f00010100000000000008400008000c1416c262456695200006000f00010100000000000008400008000c1416c2628566cf720006000f00010100000000000008400008000c1416c262c56737700006000f00010100000000000008400008000c1416c26305667a510006000f00010100000000000008400008000c1416c2634566adcb0006000f00010100000000000008400008000c1416c2638566868f0006000f00010100000000000008400008000c1416c263c56683a20006000f00010100000000000008400008000c1416c2640566d9a30006000f00010100000000000008400008000c1416c2644566c1bf0006000f00010100000000000008400008000c1416c26485669fa10006000f00010100000000000008400008000c1416c264c566af090006000f00010100000000000008400008000c1416c2650566f41f0006000f00010100000000000008400008000c1416c26545668ea90006000f00010100000000000008400008000c1416c265856688270006000f00010100000000000008400008000c1416c265c566c1d40006000f00010100000000000008400008000c1416c2660566a55a0006000f00010100000000000008400008000c1416c2664566c5ca0006000f0001010000000000000840");
        byte[] signature = DatatypeConverter.parseHexBinary("0200002c719adf9e15a4b60a658125370fdf4ec84e23e291571d705be09c10f2a1a7c4b47465737475736572");

        assertArrayEquals(signature,
                CollectdBinaryProtocol.sign((short) 0x0200, hmacSHA256, user, payload));

        payload = DatatypeConverter.parseHexBinary(
                "0000000974657374000008000c1416c3ad23f211c60009000c00000000400000000002000a7573657273000004000a7573657273000006000f00010100000000000000400008000c1416c3ad63f21f750006000f00010100000000000000400008000c1416c3ada3f1efa90006000f00010100000000000000400008000c1416c3ade3f23ad10006000f00010100000000000000400008000c1416c3ae23f2a59f0006000f00010100000000000000400008000c1416c3ae63f228ec0006000f00010100000000000000400008000c1416c3aea3f22d160006000f00010100000000000000400008000c1416c3aee3f239000006000f00010100000000000000400008000c1416c3af23f283af0006000f00010100000000000000400008000c1416c3af63f1f1400006000f00010100000000000000400008000c1416c3afa3f28a8a0006000f00010100000000000000400008000c1416c3afe3f2711f0006000f00010100000000000000400008000c1416c3b023f247770006000f00010100000000000000400008000c1416c3b063f24b0d0006000f00010100000000000000400008000c1416c3b0a3f22c3f0006000f00010100000000000000400008000c1416c3b0e3f23fdb0006000f00010100000000000000400008000c1416c3b123f243150006000f00010100000000000000400008000c1416c3b163f22b0c0006000f00010100000000000000400008000c1416c3b1a3f23b370006000f00010100000000000000400008000c1416c3b1e3f268520006000f00010100000000000000400008000c1416c3b223f229870006000f00010100000000000000400008000c1416c3b263f21fd90006000f00010100000000000000400008000c1416c3b2a3f2380f0006000f00010100000000000000400008000c1416c3b2e3f22eae0006000f00010100000000000000400008000c1416c3b323f23b320006000f00010100000000000000400008000c1416c3b363f25d7d0006000f00010100000000000000400008000c1416c3b3a3f281500006000f00010100000000000000400008000c1416c3b3e3f22d850006000f00010100000000000000400008000c1416c3b423f1ee1a0006000f00010100000000000000400008000c1416c3b463f238090006000f00010100000000000000400008000c1416c3b4a3f23a7f0006000f00010100000000000000400008000c1416c3b4e3f237d10006000f00010100000000000000400008000c1416c3b523f23b540006000f00010100000000000000400008000c1416c3b563f205920006000f00010100000000000000400008000c1416c3b5a3f20b960006000f00010100000000000000400008000c1416c3b5e3f24b440006000f00010100000000000000400008000c1416c3b623f212320006000f00010100000000000000400008000c1416c3b663f274f30006000f00010100000000000000400008000c1416c3b6a3f208a80006000f00010100000000000000400008000c1416c3b6e3f23e660006000f00010100000000000000400008000c1416c3b723f225050006000f00010100000000000000400008000c1416c3b763f20f050006000f00010100000000000000400008000c1416c3b7a3f21c5c0006000f00010100000000000000400008000c1416c3b7e3f1f5cc0006000f00010100000000000000400008000c1416c3b823f2094d0006000f00010100000000000000400008000c1416c3b863f1f3930006000f00010100000000000000400008000c1416c3b8a3f268b00006000f00010100000000000000400008000c1416c3b8e3f1fa970006000f0001010000000000000040");
        signature = DatatypeConverter.parseHexBinary("0200002c775ad11cc489edb0aec1e6e84e7e28bedf51cc2d5fb9780dd6496f6a748e0a857465737475736572");

        assertArrayEquals(signature,
                CollectdBinaryProtocol.sign((short) 0x0200, hmacSHA256, user, payload));

        payload = DatatypeConverter.parseHexBinary(
                "0000000974657374000008000c1416c3b923f2768f0009000c00000000400000000002000a7573657273000004000a7573657273000006000f00010100000000000000400008000c1416c3b963f293820006000f00010100000000000000400008000c1416c3b9a3f230570006000f00010100000000000000400008000c1416c3b9e3f245c60006000f00010100000000000000400008000c1416c3ba23f22c360006000f00010100000000000000400008000c1416c3ba63f21ad00006000f00010100000000000000400008000c1416c3baa3f223160006000f00010100000000000000400008000c1416c3bae3f256730006000f00010100000000000000400008000c1416c3bb23f231ca0006000f00010100000000000000400008000c1416c3bb63f1fb200006000f00010100000000000000400008000c1416c3bba3f201070006000f00010100000000000000400008000c1416c3bbe3f207080006000f00010100000000000000400008000c1416c3bc23f2d1650006000f00010100000000000000400008000c1416c3bc63f224830006000f00010100000000000000400008000c1416c3bca3f27f850006000f00010100000000000000400008000c1416c3bce3f239cb0006000f00010100000000000000400008000c1416c3bd23f290e40006000f00010100000000000000400008000c1416c3bd63f223410006000f00010100000000000000400008000c1416c3bda3f2407a0006000f00010100000000000000400008000c1416c3bde3f241cb0006000f00010100000000000000400008000c1416c3be23f25d870006000f00010100000000000000400008000c1416c3be63f22b390006000f00010100000000000000400008000c1416c3bea3f232fc0006000f00010100000000000000400008000c1416c3bee3f207d10006000f00010100000000000000400008000c1416c3bf23f23a200006000f00010100000000000000400008000c1416c3bf63f2154e0006000f00010100000000000000400008000c1416c3bfa3f20be20006000f00010100000000000000400008000c1416c3bfe3f23f5e0006000f00010100000000000000400008000c1416c3c023f21d440006000f00010100000000000000400008000c1416c3c063f237a90006000f00010100000000000000400008000c1416c3c0a3f24cde0006000f00010100000000000000400008000c1416c3c0e3f241ae0006000f00010100000000000000400008000c1416c3c123f2406a0006000f00010100000000000000400008000c1416c3c163f2363f0006000f00010100000000000000400008000c1416c3c1a3f235390006000f00010100000000000000400008000c1416c3c1e3f21a810006000f00010100000000000000400008000c1416c3c223f230970006000f00010100000000000000400008000c1416c3c263f206a00006000f00010100000000000000400008000c1416c3c2a3f255820006000f00010100000000000000400008000c1416c3c2e3f224aa0006000f00010100000000000000400008000c1416c3c323f204250006000f00010100000000000000400008000c1416c3c363f231d70006000f00010100000000000000400008000c1416c3c3a3f23b950006000f00010100000000000000400008000c1416c3c3e3f1f6dd0006000f00010100000000000000400008000c1416c3c423f223a80006000f00010100000000000000400008000c1416c3c463f22dd80006000f00010100000000000000400008000c1416c3c4a3f233c40006000f00010100000000000000400008000c1416c3c4e3f22bcc0006000f0001010000000000000040");
        signature = DatatypeConverter.parseHexBinary("0200002ce2d5f30655863ec6974299dd24990a288aad4d225d116353f843722fcfa95e677465737475736572");

        assertArrayEquals(signature,
                CollectdBinaryProtocol.sign((short) 0x0200, hmacSHA256, user, payload));

    }

    /*@Test
    public void testEnc() throws Exception {
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        KeySpec spec = new PBEKeySpec("testuser".toCharArray(), SecureRandom.getSeed(8), 65536, 256);

        SecretKey tmp = factory.generateSecret(spec);
        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");

        Cipher cipher = Cipher.getInstance("AES/OFB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secret);

        AlgorithmParameters params = cipher.getParameters();

        byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();
        byte[] ciphertext = cipher.doFinal("testdata".getBytes());

        for (Provider provider : Security.getProviders()) {
            System.out.println(provider.getName());
            for (String key : provider.stringPropertyNames())
                if (key.startsWith("Cipher") && key.indexOf("macSHA256") > -1)
                    System.out.println("\t" + key + "\t" + provider.getProperty(key));
        }

    }*/

}
